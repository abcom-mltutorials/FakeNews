{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Vijay of Copy of FakeNews.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lVq0bjRIMNXr",
        "colab_type": "text"
      },
      "source": [
        "# Fake News Classifier\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dvSx0ouqktOj",
        "colab_type": "text"
      },
      "source": [
        "Copyright @ 2020 **ABCOM Information Systems Pvt. Ltd.** All Rights Reserved.\n",
        "\n",
        "Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at\n",
        "\n",
        "http://www.apache.org/licenses/LICENSE-2.0\n",
        "\n",
        "Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "\n",
        "See the License for the specific language governing permissions and limitations under the License."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XDkR_W9kepay",
        "colab_type": "text"
      },
      "source": [
        "Datasource: https://www.kaggle.com/clmentbisaillon/fake-and-real-news-dataset"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bZ2UASgI7fpW",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import sklearn\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.model_selection import train_test_split\n",
        "import nltk\n",
        "from nltk.corpus import stopwords\n",
        "from nltk.tokenize import word_tokenize"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hSs60FLUMgIb",
        "colab_type": "text"
      },
      "source": [
        "# Downloading data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bWzBqA00BgPH",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 717
        },
        "outputId": "130db0f7-14ad-4e00-8d17-be5512fedaa0"
      },
      "source": [
        "!wget https://github.com/abcom-mltutorials/FakeNews/blob/master/572515_1037534_compressed_Fake.csv.zip?raw=true\n",
        "!wget https://github.com/abcom-mltutorials/FakeNews/blob/master/572515_1037534_compressed_True.csv.zip?raw=true"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "--2020-08-18 12:39:30--  https://github.com/abcom-mltutorials/FakeNews/blob/master/572515_1037534_compressed_Fake.csv.zip?raw=true\n",
            "Resolving github.com (github.com)... 140.82.118.4\n",
            "Connecting to github.com (github.com)|140.82.118.4|:443... connected.\n",
            "HTTP request sent, awaiting response... 302 Found\n",
            "Location: https://github.com/abcom-mltutorials/FakeNews/raw/master/572515_1037534_compressed_Fake.csv.zip [following]\n",
            "--2020-08-18 12:39:30--  https://github.com/abcom-mltutorials/FakeNews/raw/master/572515_1037534_compressed_Fake.csv.zip\n",
            "Reusing existing connection to github.com:443.\n",
            "HTTP request sent, awaiting response... 302 Found\n",
            "Location: https://raw.githubusercontent.com/abcom-mltutorials/FakeNews/master/572515_1037534_compressed_Fake.csv.zip [following]\n",
            "--2020-08-18 12:39:30--  https://raw.githubusercontent.com/abcom-mltutorials/FakeNews/master/572515_1037534_compressed_Fake.csv.zip\n",
            "Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.0.133, 151.101.64.133, 151.101.128.133, ...\n",
            "Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.0.133|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 23982555 (23M) [application/zip]\n",
            "Saving to: ‘572515_1037534_compressed_Fake.csv.zip?raw=true’\n",
            "\n",
            "\r          572515_10   0%[                    ]       0  --.-KB/s               \r         572515_103  30%[=====>              ]   7.00M  35.0MB/s               \r572515_1037534_comp 100%[===================>]  22.87M  70.5MB/s    in 0.3s    \n",
            "\n",
            "2020-08-18 12:39:32 (70.5 MB/s) - ‘572515_1037534_compressed_Fake.csv.zip?raw=true’ saved [23982555/23982555]\n",
            "\n",
            "--2020-08-18 12:39:38--  https://github.com/abcom-mltutorials/FakeNews/blob/master/572515_1037534_compressed_True.csv.zip?raw=true\n",
            "Resolving github.com (github.com)... 140.82.118.4\n",
            "Connecting to github.com (github.com)|140.82.118.4|:443... connected.\n",
            "HTTP request sent, awaiting response... 302 Found\n",
            "Location: https://github.com/abcom-mltutorials/FakeNews/raw/master/572515_1037534_compressed_True.csv.zip [following]\n",
            "--2020-08-18 12:39:39--  https://github.com/abcom-mltutorials/FakeNews/raw/master/572515_1037534_compressed_True.csv.zip\n",
            "Reusing existing connection to github.com:443.\n",
            "HTTP request sent, awaiting response... 302 Found\n",
            "Location: https://raw.githubusercontent.com/abcom-mltutorials/FakeNews/master/572515_1037534_compressed_True.csv.zip [following]\n",
            "--2020-08-18 12:39:39--  https://raw.githubusercontent.com/abcom-mltutorials/FakeNews/master/572515_1037534_compressed_True.csv.zip\n",
            "Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.0.133, 151.101.64.133, 151.101.128.133, ...\n",
            "Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.0.133|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 18993378 (18M) [application/zip]\n",
            "Saving to: ‘572515_1037534_compressed_True.csv.zip?raw=true’\n",
            "\n",
            "572515_1037534_comp 100%[===================>]  18.11M  80.0MB/s    in 0.2s    \n",
            "\n",
            "2020-08-18 12:39:40 (80.0 MB/s) - ‘572515_1037534_compressed_True.csv.zip?raw=true’ saved [18993378/18993378]\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "q22TPeM56vei",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        },
        "outputId": "f55d9fff-9394-4226-9c2a-c2326b70f636"
      },
      "source": [
        "!unzip \"/content/572515_1037534_compressed_Fake.csv.zip?raw=true\"\n",
        "!unzip \"/content/572515_1037534_compressed_True.csv.zip?raw=true\""
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Archive:  /content/572515_1037534_compressed_Fake.csv.zip?raw=true\n",
            "  inflating: Fake.csv                \n",
            "Archive:  /content/572515_1037534_compressed_True.csv.zip?raw=true\n",
            "  inflating: True.csv                \n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "krQmnazZM0rF",
        "colab_type": "text"
      },
      "source": [
        "## Examining data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ur4xlJNP7Yzs",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 289
        },
        "outputId": "6f7cbcbb-3849-438a-dfa1-be6e7cc80719"
      },
      "source": [
        "fake = pd.read_csv(\"Fake.csv\")\n",
        "true = pd.read_csv(\"True.csv\")\n",
        "print(fake.head())\n",
        "print(true.head())"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "                                               title  ...               date\n",
            "0   Donald Trump Sends Out Embarrassing New Year’...  ...  December 31, 2017\n",
            "1   Drunk Bragging Trump Staffer Started Russian ...  ...  December 31, 2017\n",
            "2   Sheriff David Clarke Becomes An Internet Joke...  ...  December 30, 2017\n",
            "3   Trump Is So Obsessed He Even Has Obama’s Name...  ...  December 29, 2017\n",
            "4   Pope Francis Just Called Out Donald Trump Dur...  ...  December 25, 2017\n",
            "\n",
            "[5 rows x 4 columns]\n",
            "                                               title  ...                date\n",
            "0  As U.S. budget fight looms, Republicans flip t...  ...  December 31, 2017 \n",
            "1  U.S. military to accept transgender recruits o...  ...  December 29, 2017 \n",
            "2  Senior U.S. Republican senator: 'Let Mr. Muell...  ...  December 31, 2017 \n",
            "3  FBI Russia probe helped by Australian diplomat...  ...  December 30, 2017 \n",
            "4  Trump wants Postal Service to charge 'much mor...  ...  December 29, 2017 \n",
            "\n",
            "[5 rows x 4 columns]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "F9a37S0TgTP5",
        "colab_type": "text"
      },
      "source": [
        "## Print a sample headline"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vQejI26yU03N",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "5a0464cf-2488-413a-9b44-c76e424d27a9"
      },
      "source": [
        "print(\"Fake news headline: \"+fake.iloc[0,0])\n",
        "print(\"True news headline: \"+true.iloc[0,0])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Fake news headline:  Donald Trump Sends Out Embarrassing New Year’s Eve Message; This is Disturbing\n",
            "True news headline: As U.S. budget fight looms, Republicans flip their fiscal script\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wEchsOfAPAfh",
        "colab_type": "text"
      },
      "source": [
        "## Check dataset sizes"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dFa93d3R74Ta",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "97feb48d-29ab-409a-ce2d-7590ac1c3ed3"
      },
      "source": [
        "print(fake.shape)\n",
        "print(true.shape)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(23481, 4)\n",
            "(21417, 4)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "G1tfXEbFThz0",
        "colab_type": "text"
      },
      "source": [
        "## Shrink datasets"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "voRdqnIr9QMU",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "fake = fake[:11740]\n",
        "true = true[:10708]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ACsFPgNP-WcZ",
        "colab_type": "text"
      },
      "source": [
        "# Preprocess datasets"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UFT3kE25mVMS",
        "colab_type": "text"
      },
      "source": [
        "## Add is_fake column"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wPbz1Gt77-bq",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Entering 1 for fake and 0 for true in is_fake \n",
        "# column for both the dataframes\n",
        "fake_news = []\n",
        "for row in range(len(fake)):\n",
        "  fake_news.append(\"fake\")\n",
        "fake[\"is_fake\"] = fake_news\n",
        "\n",
        "fake_news = []\n",
        "for row in range(len(true)):\n",
        "  fake_news.append(\"true\")\n",
        "true[\"is_fake\"] = fake_news"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1JGKrHiYma28",
        "colab_type": "text"
      },
      "source": [
        "## Merge two datasets"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "C4h_cr2d9SgL",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "news = pd.merge(fake,true, how = \"outer\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nPVl3bhmmiO5",
        "colab_type": "text"
      },
      "source": [
        "## Check class distribution"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1fUiKD09RXau",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 331
        },
        "outputId": "dc323611-a33c-41ab-da09-0b95b338a01c"
      },
      "source": [
        "classes = news[\"is_fake\"]\n",
        "print(classes.value_counts())\n",
        "classes.hist()\n",
        "plt.xlabel(\"Classes in is_fake\")\n",
        "plt.ylabel(\"Number of records\")\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "fake    11740\n",
            "true    10708\n",
            "Name: is_fake, dtype: int64\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XaNi3cHKmyE4",
        "colab_type": "text"
      },
      "source": [
        "## Encode is_fake column"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "w3PORSXQQu5h",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# convert class labels to binary values, \n",
        "# 0 = fake and 1 = true\n",
        "encoder = LabelEncoder()\n",
        "is_fake = encoder.fit_transform(classes)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b_eGEX7lm3VU",
        "colab_type": "text"
      },
      "source": [
        "## Extract headlines"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JXnzT2zl8Oyf",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "d4f609ed-14dc-46f1-936f-e14a1e894505"
      },
      "source": [
        "headlines = news[\"title\"]\n",
        "print(headlines[:10])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0     Donald Trump Sends Out Embarrassing New Year’...\n",
            "1     Drunk Bragging Trump Staffer Started Russian ...\n",
            "2     Sheriff David Clarke Becomes An Internet Joke...\n",
            "3     Trump Is So Obsessed He Even Has Obama’s Name...\n",
            "4     Pope Francis Just Called Out Donald Trump Dur...\n",
            "5     Racist Alabama Cops Brutalize Black Boy While...\n",
            "6     Fresh Off The Golf Course, Trump Lashes Out A...\n",
            "7     Trump Said Some INSANELY Racist Stuff Inside ...\n",
            "8     Former CIA Director Slams Trump Over UN Bully...\n",
            "9     WATCH: Brand-New Pro-Trump Ad Features So Muc...\n",
            "Name: title, dtype: object\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "y3DHowaim_F-",
        "colab_type": "text"
      },
      "source": [
        "## Remove punctuation"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EDa7ciuGLEaS",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "headlines = headlines.str.replace(r'[^\\w\\d\\s]', ' ')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vYFNMKsEnLCf",
        "colab_type": "text"
      },
      "source": [
        "## Change words to lowercase"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OIBmQ8ip_qYP",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "headlines = headlines.str.lower() "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "I3X6UnetsvZx",
        "colab_type": "text"
      },
      "source": [
        "## Remove stopwords"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7i-GmXBDAJpH",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "ec47fc4e-cfb5-494a-bfc9-160e569bc503"
      },
      "source": [
        "#Removing stopwords from news headlines\n",
        "nltk.download(\"stopwords\")\n",
        "stop_words = set(stopwords.words(\"english\")) \n",
        "headlines = headlines.apply(lambda x : \" \".\n",
        "                            join(word for word in x.split() \n",
        "                            if word not in stop_words))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/stopwords.zip.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FlH1HqxU9wSD",
        "colab_type": "text"
      },
      "source": [
        "## Stemming"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mnufnWNKCMXC",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Remove affixes to give stems using a Porter stemmer\n",
        "ps = nltk.PorterStemmer()\n",
        "headlines = headlines.apply(lambda x: ' '.join(ps.stem(word) \n",
        "                            for word in x.split()))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fQa56hY6GeOr",
        "colab_type": "text"
      },
      "source": [
        "# Generating Features"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yVQ6oFIJZgMe",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        },
        "outputId": "ca8c9513-e5ca-4e92-dee9-31096ade51b5"
      },
      "source": [
        "# download tokenizer\n",
        "nltk.download(\"punkt\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Unzipping tokenizers/punkt.zip.\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0k1OKv0TGV5i",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "0822c8eb-8734-4b2d-ea01-79c557463979"
      },
      "source": [
        "# creating a collection of all the words\n",
        "all_words = []\n",
        "\n",
        "for line in headlines:\n",
        "    words = word_tokenize(line)\n",
        "    for word in words:\n",
        "        all_words.append(word)\n",
        "\n",
        "print(\"Number of words: \", len(all_words))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Number of words:  206497\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qkgV89HNbC3v",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# extract unique words\n",
        "all_words = nltk.FreqDist(all_words)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QWr9ZhRkJZbW",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 71
        },
        "outputId": "c56e690c-148c-49ff-a192-17f6f54c2289"
      },
      "source": [
        "# print the total number of words and the 15 most common words\n",
        "print('Number of words: {}'.format(len(all_words)))\n",
        "print('Most common words: {}'.format(all_words.most_common(15)))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Number of words: 10174\n",
            "Most common words: [('trump', 11274), ('video', 4022), ('u', 3198), ('say', 1980), ('republican', 1602), ('hous', 1584), ('senat', 1416), ('obama', 1401), ('watch', 1279), ('white', 1130), ('presid', 981), ('clinton', 978), ('tweet', 970), ('bill', 919), ('democrat', 886)]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6P5MqI-KdzNY",
        "colab_type": "text"
      },
      "source": [
        "## Narrowing down the features list"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_HCT5JARKDhY",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# use the 2300 most common words as features\n",
        "word_features = list(all_words.keys())[:2300]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "p2j3KzvzV-H7",
        "colab_type": "text"
      },
      "source": [
        "## Function for finding features in a given headline"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LeGLFLArMjmj",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        },
        "outputId": "b2a8ad18-bb09-4f53-b9c9-02bc15c0142b"
      },
      "source": [
        "# The find_features function will determine which of \n",
        "# the 2300 word features are contained in the headlines\n",
        "def find_features(headline):\n",
        "    words = word_tokenize(headline)\n",
        "    features = {}\n",
        "    for word in word_features:\n",
        "        features[word] = (word in words)\n",
        "\n",
        "    return features\n",
        "\n",
        "# Let's see an example\n",
        "features = find_features(headlines[0])\n",
        "for key, value in features.items():\n",
        "    if value == True:\n",
        "        print(key)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "donald\n",
            "trump\n",
            "send\n",
            "embarrass\n",
            "new\n",
            "year\n",
            "eve\n",
            "messag\n",
            "disturb\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GgNtOX7YhZYw",
        "colab_type": "text"
      },
      "source": [
        "Note: The code below is delicate as we are using shuffle function and generating featuresset. If you run into any error then do not re-run the cell.\n",
        "Instead restart the kernel and run all the cells again."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "o8LN3PB0WJB3",
        "colab_type": "text"
      },
      "source": [
        "## Create a Features set using entire dataset"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jcysXN2vNs6r",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Now lets do it for all the headlines\n",
        "headlines = list(zip(headlines, is_fake))\n",
        "# define a seed for reproducibility\n",
        "seed = 1\n",
        "np.random.seed = seed\n",
        "np.random.shuffle(headlines)\n",
        "\n",
        "# call find_features function for each headline\n",
        "featuresets = [(find_features(headline), category) \n",
        "                for (headline, category) in headlines]\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "z9BjdKRDVzbT",
        "colab_type": "text"
      },
      "source": [
        "# Creating datasets"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_jkVWujeSfRT",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# we can split the featuresets into training and testing datasets using model_selection in sklearn\n",
        "# split the data into training and testing datasets\n",
        "\n",
        "training, testing = train_test_split(featuresets, \n",
        "                                     test_size = 0.25, \n",
        "                                     random_state=seed)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OZ-HeZMCiTq1",
        "colab_type": "text"
      },
      "source": [
        "# Training on Multiple Classifiers "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Mx2gRqmciO_v",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from nltk.classify.scikitlearn import SklearnClassifier\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.linear_model import SGDClassifier\n",
        "from sklearn.naive_bayes import MultinomialNB\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.metrics import classification_report, accuracy_score, confusion_matrix, max_error"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HHps5TxMMatY",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 136
        },
        "outputId": "c8358a38-a517-4a8f-dab0-4f267a476943"
      },
      "source": [
        "# Define models to train\n",
        "names = [\"Logistics Regression\",\n",
        "         \"K Nearest Neighbors\", \n",
        "         \"Decision Tree\", \n",
        "         \"Random Forest\",  \n",
        "         \"SGD Classifier\",\n",
        "         \"Naive Bayes\", \n",
        "         \"SVM Linear\"]\n",
        "\n",
        "classifiers = [\n",
        "    LogisticRegression(),\n",
        "    KNeighborsClassifier(),\n",
        "    DecisionTreeClassifier(),\n",
        "    RandomForestClassifier(),\n",
        "    SGDClassifier(max_iter = 100),\n",
        "    MultinomialNB(),\n",
        "    SVC(kernel = 'linear')\n",
        "]\n",
        "\n",
        "models = zip(names, classifiers)\n",
        "\n",
        "for name, model in models:\n",
        "    nltk_model = SklearnClassifier(model)\n",
        "    nltk_model.train(training)\n",
        "    accuracy = nltk.classify.accuracy(nltk_model, testing)*100\n",
        "    print(\"{} Accuracy: {}\".format(name, accuracy))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Logistics Regression Accuracy: 92.96151104775481\n",
            "K Nearest Neighbors Accuracy: 63.934426229508205\n",
            "Decision Tree Accuracy: 87.08125445473985\n",
            "Random Forest Accuracy: 90.68068424803991\n",
            "SGD Classifier Accuracy: 93.01496792587312\n",
            "Naive Bayes Accuracy: 91.21525302922309\n",
            "SVM Linear Accuracy: 92.8367783321454\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OCmKQdWkza_A",
        "colab_type": "text"
      },
      "source": [
        "# VotingClassifier"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YtuViXzoVOYh",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "a2e801c0-3b3f-49a9-9750-aae1d29dad76"
      },
      "source": [
        "# Ensemble methods - Voting classifier\n",
        "from sklearn.ensemble import VotingClassifier\n",
        "\n",
        "names = [\"Logistics Regression\",\n",
        "         \"K Nearest Neighbors\", \n",
        "         \"Decision Tree\", \n",
        "         \"Random Forest\",  \n",
        "         \"SGD Classifier\",\n",
        "         \"Naive Bayes\", \n",
        "         \"SVM Linear\"]\n",
        "\n",
        "classifiers = [\n",
        "    LogisticRegression(),\n",
        "    KNeighborsClassifier(),\n",
        "    DecisionTreeClassifier(),\n",
        "    RandomForestClassifier(),\n",
        "    SGDClassifier(max_iter = 100),\n",
        "    MultinomialNB(),\n",
        "    SVC(kernel = 'linear')\n",
        "]\n",
        "models = list(zip(names, classifiers))\n",
        "\n",
        "ensemble = SklearnClassifier(VotingClassifier(estimators = models, voting = 'hard', n_jobs = -1))\n",
        "ensemble.train(training)\n",
        "accuracy = nltk.classify.accuracy(nltk_model, testing)*100\n",
        "print(\"Voting Classifier: Accuracy: {}\".format(accuracy))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Voting Classifier: Accuracy: 92.8367783321454\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dV9zYcajKr3w",
        "colab_type": "text"
      },
      "source": [
        "# Model Evaluation"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ECHX4Y-NGggj",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# make class label prediction for testing set\n",
        "headline_features, labels = zip(*testing)\n",
        "prediction = ensemble.classify_many(headline_features)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5BDGDVxNiZaT",
        "colab_type": "text"
      },
      "source": [
        "## Classification report"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sRHQ2eCWQoQ_",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        },
        "outputId": "e9d5ddd7-3c7c-4fb2-e87c-0357102a794d"
      },
      "source": [
        "# classification report\n",
        "print(classification_report(labels, prediction))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.96      0.90      0.93      2941\n",
            "           1       0.90      0.96      0.93      2671\n",
            "\n",
            "    accuracy                           0.93      5612\n",
            "   macro avg       0.93      0.93      0.93      5612\n",
            "weighted avg       0.93      0.93      0.93      5612\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "blgdMAJyigY3",
        "colab_type": "text"
      },
      "source": [
        "## Confusion matrix"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WWiPy59QKbez",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 142
        },
        "outputId": "65a70de7-9c7a-4177-b2ad-26f3dacf4bc1"
      },
      "source": [
        "pd.DataFrame(\n",
        "    confusion_matrix(labels, prediction),\n",
        "    index = [['actual', 'actual'], ['fake', 'true']],\n",
        "    columns = [['predicted', 'predicted'], ['fake', 'true']])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th colspan=\"2\" halign=\"left\">predicted</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th>fake</th>\n",
              "      <th>true</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th rowspan=\"2\" valign=\"top\">actual</th>\n",
              "      <th>fake</th>\n",
              "      <td>2647</td>\n",
              "      <td>294</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>true</th>\n",
              "      <td>105</td>\n",
              "      <td>2566</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "            predicted      \n",
              "                 fake  true\n",
              "actual fake      2647   294\n",
              "       true       105  2566"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pVpT06ELJYR4",
        "colab_type": "text"
      },
      "source": [
        "# Classifying unseen news"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vhYUcnjtgapT",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "9dd27e44-7a36-4f74-ff6c-c078d4d1491f"
      },
      "source": [
        "print(ensemble.classify(find_features(\"Alia Bhatt’s Sadak 2 the most disliked trailer on YouTube amid nepotism debate, fans demand justice for Sushant Singh Rajput\"))) "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7h6ZChz-0UC4",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "163a89e3-88c1-446d-e827-627e71500736"
      },
      "source": [
        "print(ensemble.classify(find_features(\"India Air crash survivor recounts final minutes in plane\")))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QQ5HW4KZnVB_",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "cfb56bac-e276-4a74-b817-694b8d216ff7"
      },
      "source": [
        "print(ensemble.classify(find_features(\"Kerala plane crash: 92 injured passengers discharged from hospitals after 'obtaining complete fitness'\")))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LNQN5MlJit0o",
        "colab_type": "text"
      },
      "source": [
        "# Classifying news stream"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7oUWVczNjVzo",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 122
        },
        "outputId": "0343ee84-778f-4d15-8ba5-3990512499c2"
      },
      "source": [
        "# Make a list of news\n",
        "newslist = []\n",
        "newslist.append(\"NASA tweets beautiful pictures of Mars. They may make you gasp in wonder\")\n",
        "newslist.append(\"How visually impaired woman beat the odds to crack UPSC exam. She’s inspiring many including Mohammad Kaif\")\n",
        "newslist.append(\"Russia registers the world's first Covid-19 vaccine, Putin says his daughter was given a shot\")\n",
        "newslist.append(\"2020 is the year to stay alive, and don't think of profit or loss\")\n",
        "newslist.append(\"Democratic presidential candidate Joe Biden and running mate Kamala Harris have attacked 'whining' President Donald Trump as an incompetent leader who has left the US 'in tatters'.\")\n",
        "newslist"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['NASA tweets beautiful pictures of Mars. They may make you gasp in wonder',\n",
              " 'How visually impaired woman beat the odds to crack UPSC exam. She’s inspiring many including Mohammad Kaif',\n",
              " \"Russia registers the world's first Covid-19 vaccine, Putin says his daughter was given a shot\",\n",
              " \"2020 is the year to stay alive, and don't think of profit or loss\",\n",
              " \"Democratic presidential candidate Joe Biden and running mate Kamala Harris have attacked 'whining' President Donald Trump as an incompetent leader who has left the US 'in tatters'.\"]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xuLtcJaI8hyz",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 181
        },
        "outputId": "1a75ea9c-aee9-48fc-f8d6-17005f2b6168"
      },
      "source": [
        "# Then make a dataframe of single column using the list\n",
        "news_classification = pd.DataFrame(newslist, columns=[\"News\"])\n",
        "news_classification"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-2-5c0f4146d27e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Then make a dataframe of single column using the list\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mnews_classification\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnewslist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"News\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'pd' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4BT_byoP8pay",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Then making predictions and storing in another list. In is_true column 0 - fake and 1 - true\n",
        "is_true = []\n",
        "for i in newslist:\n",
        "  is_true.append(ensemble.classify(find_features(i)))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "G8PzQQfx86dA",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "4afdfb2c-427b-486b-d780-5cee75b22329"
      },
      "source": [
        "# Finally appending the prediction to dataframe and printing it altogether\n",
        "news_classification[\"is_true\"] = is_true\n",
        "news_classification"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>News</th>\n",
              "      <th>is_true</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>NASA tweets beautiful pictures of Mars. They m...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>How visually impaired woman beat the odds to c...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Russia registers the world's first Covid-19 va...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2020 is the year to stay alive, and don't thin...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Democratic presidential candidate Joe Biden an...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                                News  is_true\n",
              "0  NASA tweets beautiful pictures of Mars. They m...        1\n",
              "1  How visually impaired woman beat the odds to c...        0\n",
              "2  Russia registers the world's first Covid-19 va...        1\n",
              "3  2020 is the year to stay alive, and don't thin...        0\n",
              "4  Democratic presidential candidate Joe Biden an...        1"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 37
        }
      ]
    }
  ]
}